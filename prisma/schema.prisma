// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output="./clients/mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DB_MYSQL_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  type      Int       @default(0) // 0:系统用户 1:外部用户
  status    Int       @default(1) // 0:禁用 1:激活
  sortOrder Int       @default(500)
  unionId   String?
  openId    String?
  loginIP   String?
  loginAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile UserProfile?
  logs    Log[]
  roles   UserRoleRelation[]

  @@map("users")
}

model UserProfile {
  id       Int       @id @default(autoincrement())
  nickname String?
  email    String?   @unique
  phone    String?   @unique
  avatar   String?
  expired  DateTime?
  gender   Int?
  remark   String? //@db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@map("user_profiles")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  status      Int      @default(1) // 0: 禁用, 1: 激活
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       UserRoleRelation[]
  menus       RoleMenuRelation[]
  permissions RolePermissionRelation[]
  policies    RolePolicyRelation[]

  @@map("roles")
}

// 这里是与用户表的关系定义
model UserRoleRelation {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId]) // 复合索引
  @@map("user_role_relation")
}

model Permission {
  id          Int     @id @default(autoincrement())
  name        String  @unique // ControllerName + RouteName -> user:create
  action      String // action: READ, CREATE, UPDATE, DELETE, MANAGE
  description String?

  roles RolePermissionRelation[]

  policies PermissionPolicyRelation[]

  @@map("permissions")
}

model RolePermissionRelation {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions_relation")
}

model Policy {
  id         Int    @id @default(autoincrement())
  type       Int // 类型标识，0-json,1-mongo,2-function
  effect     String // 'can' | 'cannot'
  action     String // CURD + manage
  subject    String // Class
  fields     Json? // 字段列表, {type, data}
  conditions Json?
  args       Json?
  encode     String @unique

  roles       RolePolicyRelation[]
  permissions PermissionPolicyRelation[]

  @@map("policy")
}

// Role -> Policy 角色所拥有的策略权限
model RolePolicyRelation {
  roleId   Int
  policyId Int
  role     Role   @relation(fields: [roleId], references: [id])
  policy   Policy @relation(fields: [policyId], references: [id])

  @@id([roleId, policyId])
  @@map("role_policies_relation")
}

// Permission -> Policy 路由级别所需要的策略权限
model PermissionPolicyRelation {
  permissionId Int
  policyId     Int

  permission Permission @relation(fields: [permissionId], references: [id])
  policy     Policy     @relation(fields: [policyId], references: [id])

  @@id([permissionId, policyId])
  @@map("permission_polices_relation")
}

// 这里是与菜单表的关系定义
model RoleMenuRelation {
  roleId Int
  menuId Int
  role   Role @relation(fields: [roleId], references: [id])
  menu   Menu @relation(fields: [menuId], references: [id])

  @@id([roleId, menuId])
  @@map("role_menu_relation")
}

model Menu {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  path      String
  component String?

  parentId Int?
  children Menu[] @relation("menu_relation")
  parent   Menu?  @relation("menu_relation", fields: [parentId], references: [id], onDelete: Cascade)

  meta  MenuMeta?
  roles RoleMenuRelation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menus")
}

model MenuMeta {
  id Int @id @default(autoincrement())

  query     String?
  icon      String?
  sortOrder Int     @default(500)

  // type       Int // 0:目录 1:菜单 2:按钮
  status     Int     @default(1) // 菜单状态（0停用 1正常）
  noClosable Int     @default(0)
  hidden     Int     @default(0) // 是否隐藏（0显示 1隐藏）
  activeMenu String?
  guard      String?
  dot        Int     @default(0)
  badge      String?
  isFrame    Int? // 是否为外链  0:否 1:是
  isCache    Int     @default(0) // 是否缓存 0:否 1:是

  menuId Int  @unique
  menu   Menu @relation(fields: [menuId], references: [id])

  @@map("menu_meta")
}

model Log {
  id        Int      @id @default(autoincrement())
  api       String
  type      Int
  status    Int
  content   String
  username  String
  ip        String
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("logs")
}

model DictionaryCategory {
  id          Int     @id @default(autoincrement())
  name        String
  sortOrder   Int     @default(500)
  description String?
  status      Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dictionaryData DictionaryData[]

  @@map("dictionary_category")
}

model DictionaryData {
  id          Int     @id @default(autoincrement())
  label       String
  value       String
  sortOrder   Int     @default(500)
  description String?
  status      Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId Int
  category   DictionaryCategory @relation(fields: [categoryId], references: [id])

  @@map("dictionary_data")
}
